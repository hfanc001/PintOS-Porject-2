		     +--------------------------+
       	       	     |		CS 153		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Hsin-Yu Fan Chiang    <hfanc001@ucr.edu>
Jordan Kincer       <jkinc002@ucr.edu>
Shinray Kuo         <skuo004@ucr.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

// to share between process_execute() in the
// invoking thread and start_process() inside the newly invoked
// thread
struct exe_helper

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

We tokenize the string into words, and push all the relevant data onto the
userspace stack.

Then, we push a word align.

Now, the order matters; we push the pointers to the elements of argv[] 
onto the stack in REVERSE order (since the stack grows downwards). Don't
forget to start with argv[argc] = 0 since the array is 0 terminated (C
standard).

Then, we push a pointer to the beginning of argv (the address of argv[0])
followed by the arg count (argc).

Finally, we push a fake return address. The original function will never return
since it transforms into the user program, but it's still necessary.


To avoid overflow, we must check before every push that our total number of args
won't exceed the stack size. Each arg consumes 4 bytes so it's pretty
predictable in that sense.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

The difference between strtok and strtok_r is that the latter is reentrant.
This means that it is threadsafe. Strtok relies on a pointer to remember
where it was looking in the string, and so the reentrant version allows us to
pass in the correct particular saved pointer.

It's important for us to be threadsafe since threads may be interrupted at
any time.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

One reason is that there is no reason to do that in kernel mode when it can be
done in user mode. If something goes wrong, like if there are too many arguments,
and the parser crashes, only the shell will experience it and the kernel stays
safe. This also keeps kernel code cleaner and simpler.

Another reason would be features such as redirection and path variables.
This, again, would add complexity to the kernel code, since the kernel would
then have to go digging around to find the user-level resources.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

//terminate PintOS by shutting it off, may lose some information 
void halt (void)

//terminate the user program 
void exit (int status)

//runs the executable that is passed in
pid_t exec (const char *cmd_line)

//wait for the child process to clean it up
int wait (pid_t pid)

//creates a new file
bool create (const char *file, unsigned initial_size)

//deletes the file that is passed in and return the status of deletion
bool remove (const char *file)

//open the passed in file and either return the fd or -1 
int open (const char *file)

//return the file size
int filesize (int fd)

//read the content in the file by putting it into the buffer
//read the content that are passed in from the keyboard 
int read (int fd, void *buffer, unsigned size)

//write to the file that is already opened
int write (int fd, const void *buffer, unsigned size)

//cheange the next byte to be readable or writable
void seek (int fd, unsigned position)

//return the next position that is readable or writable
unsigned tell (int fd)

//exit/terminate the process and close all the fd
void close (int fd)

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

Each thread maintains its own list of file descriptors. This means that
they are unique only within their own scope. This also means that children
won't inherit any open files.

Note that 0 and 1 are reserved for STDIN and STDOUT.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

Answer:
    First validate the user address. Check if it is below PHYS_BASE,
    that the address is mapped, and that it is not null. Never trust
    anything from the user!
    
    If invalid, we need to remember to free the memory page and release
    any locks or semaphores from the offending process.


>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

For 4k bytes:
The least number of times it could be called is 1.
The data could be all on one page.
The most could be 4096, as each segment could end up on a different page.

For 2 bytes:
The minimum is 1, and maximum is two for same reason as above.

We could save time by simply not checking (using the other method of 
user memory access). We'd use pagefaults instead. Instead of checking, we
would continue running until an invalid address is accessed.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

Answer:
	Implementation: 
		If the pid is not a child of the process that called wait, return -1
		If wait on this pid is already called before by this process, return -1
		
		If pid is still exist, wait
		Else 
			if the pid called exit, return the value that the pid passed to exit
			else, return -1 
	
	Wait needs to retrive data from process termination to determin if a 
	child process has already exited or is exiting. 
	
>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

Our implementation is simpler if we just verify all addresses using 
pagedir_get_page() to check if it is mapped, checking for null, and using 
is_user_vaddr() to check if it is user virtual address. Thus, whenever we 
make a system call, we check pointer arguments. They also pass in their 
buffer sizes as an argument, so we check [size] number of addresses to make 
sure all the addresses that were passed in are valid.

Since we check the pointer address(es) before running any code, there should not
be any error related to the pointer address. We can combine all of this in a
single helper function for cleaner code.

If we detect any invalid address, we must check every possible resource that 
the current process is using and free those resources. We must go through the 
list of file descriptors that the process is using and close them. The executing
file must also be freed. We must check everything that we allocated in wait()
and free it, if possible.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

We created a struct that stores the success/fail of load(). This value
is updated whenever start_process() calls load() so load's status 
should be always available. We didn't want to change start_process() to a bool
instead of void because we weren't sure if this would affect the code every
where else.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

Answer: 
	If the parent process P called wait(C) before child process C exits, 
	P will be blocked until C exits and wait(C) got executed.
	
	If P called wait(C) after C exits, then C will become zombie after it 
	exits and before wait(C) got executed. 
	
	In order to ensure that all resources are freeed in each cases, P should
	check the process table often and see if any of its child processes have 
	exit already. That way, even though a zombie does not use up any memory
	or CPU, we can make sure that the process table is always filled by 
	actual living processes. 
	
	If P terminates before C exits, then init should adopt the C who now
	has became an orphan after P exits. Init should call wait when C exits. 
	
	If P terminiates after C exits, then C will be a zombie between the 
	time when C exits and before init adopt it and call wait(C). 
	
	Some special cases would be if P has not exited, but it never call 
	wait() on any of its children. In this case, there will be a lot of
	zombies. 

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

Looking at the project documentation's options for accessing user memory, we
picked the method that verifies the validity of a user-provided pointer, then 
dereference it. Because it's simpler to implement than the other one.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Advantages:
Each thread has its own struct(list) of file descriptors. Effectively unlimited
number of open files. This is simple, easy to understand and implement.
Shared structure across all threads, same way to access.

Disadvantages:

Each thread has its own struct(list) of file descriptors. This is duplicated
across every thread.
This takes O(n) time to access.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

There is no need to change this mapping because Pintos does not support
multithreading.

If multithreading was required, we could do something like pid * 1000 + tid, so
you could easily determine the thread's process.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?